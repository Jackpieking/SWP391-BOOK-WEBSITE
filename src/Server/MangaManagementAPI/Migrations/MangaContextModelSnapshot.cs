// <auto-generated />
using System;
using MangaManagementAPI.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace MangaManagementAPI.Migrations
{
    [DbContext(typeof(MangaContext))]
    partial class MangaContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("MangaManagementAPI.Data.Models.Category", b =>
                {
                    b.Property<Guid>("CategoryIdentifier")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<string>("Description")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("VARCHAR(500)")
                        .HasDefaultValue("");

                    b.Property<string>("Name")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("VARCHAR(50)")
                        .HasDefaultValue("");

                    b.HasKey("CategoryIdentifier");

                    b.ToTable("category", (string)null);

                    b.HasData(
                        new
                        {
                            CategoryIdentifier = new Guid("414e65b4-1949-48ce-a764-26fb66e95550"),
                            Description = "A story where a lot of cooking and cooking-related topics are covered. This includes cooking shows, celebrity chefs, restaurants, recipe books, cooking techniques, and other topics related to cooking. For example, some common subcategories are cooking techniques, vegan cooking, baking, and food chemistry.",
                            Name = "Cooking"
                        },
                        new
                        {
                            CategoryIdentifier = new Guid("1b9d5460-4c32-4703-b4bd-c52e5fb6e943"),
                            Description = "A story where martial arts and martial arts-related topics are covered. This includes stories about martial artists, martial arts tournaments, martial arts academies, and other topics related to martial arts. For example, some common subcategories are martial arts styles, self-defense, and martial arts history. Some anime and manga with this category include 'Kenichi: The Mightiest Disciple' and 'The Karate Kid.'",
                            Name = "MartialArts"
                        },
                        new
                        {
                            CategoryIdentifier = new Guid("ad2149ef-ac21-4759-88d8-e586e850e299"),
                            Description = "A story where student life and school-related topics are covered. This includes stories about students, teachers, school activities, school dramas, and other topics related to the school setting. For example, some common subcategories are school life, school romances, school sports, and school clubs. Some manga and anime with this category include 'K-On!' and 'GTO.'",
                            Name = "SchoolLife"
                        },
                        new
                        {
                            CategoryIdentifier = new Guid("edc6e266-7b95-4723-a420-8e51a78d99bc"),
                            Description = "A story where fighting and battling-related topics are covered. This includes stories about heroes, villains, monsters, ninjas, soldiers, aliens, robots, and other topics related to battles and wars. For example, some common subcategories are action adventures, science fiction, and super-hero stories. Some manga and anime with this category include 'Dragon Ball Z' and 'One Piece.'",
                            Name = "Action"
                        },
                        new
                        {
                            CategoryIdentifier = new Guid("72522ef6-6633-4519-872b-36bc0675e328"),
                            Description = "A story where science fiction and sci-fi-related topics are covered. This includes stories about futuristic worlds, space travel, aliens, cyborgs, robots, and other topics related to imaginary or futuristic worlds. For example, some common subcategories are sci-fi adventures, science fiction romance, and space operas. Some manga and anime with this category include 'Ghost in the Shell' and 'Cowboy Bebop.'",
                            Name = "Sci-fi"
                        },
                        new
                        {
                            CategoryIdentifier = new Guid("ddebafec-b0a5-49c6-ac6c-261079080dce"),
                            Description = "A story where the art is in full color.",
                            Name = "FullColor"
                        },
                        new
                        {
                            CategoryIdentifier = new Guid("322dbf35-54aa-416e-b121-42fc20b9d94b"),
                            Description = "A story where horror and horror-related topics are covered. This includes stories about monsters, ghosts, demons, zombies, vampires, and other",
                            Name = "Horror"
                        });
                });

            modelBuilder.Entity("MangaManagementAPI.Data.Models.Chapter", b =>
                {
                    b.Property<Guid>("ChapterIdentifier")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<double>("ChapterNumber")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("double precision")
                        .HasDefaultValue(0.0);

                    b.Property<Guid>("ComicIdentifier")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValue(new Guid("00000000-0000-0000-0000-000000000000"));

                    b.Property<int>("UnlockPrice")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0);

                    b.HasKey("ChapterIdentifier");

                    b.HasIndex("ComicIdentifier");

                    b.ToTable("chapter", (string)null);

                    b.HasData(
                        new
                        {
                            ChapterIdentifier = new Guid("3f5a415f-caa3-426b-8926-a11a55dc49b0"),
                            ChapterNumber = 1.0,
                            ComicIdentifier = new Guid("4dfe12e0-cb8a-4282-8e74-3b1e8053f787"),
                            UnlockPrice = 0
                        },
                        new
                        {
                            ChapterIdentifier = new Guid("ef26e85e-4bd5-414f-9a2b-40bc43534523"),
                            ChapterNumber = 2.0,
                            ComicIdentifier = new Guid("4dfe12e0-cb8a-4282-8e74-3b1e8053f787"),
                            UnlockPrice = 25
                        },
                        new
                        {
                            ChapterIdentifier = new Guid("94f15b6a-a89b-4546-82a4-98098bab83ff"),
                            ChapterNumber = 1.0,
                            ComicIdentifier = new Guid("aadadaf7-fc21-4559-a53c-f97eb1ba583f"),
                            UnlockPrice = 0
                        },
                        new
                        {
                            ChapterIdentifier = new Guid("ab9d0e26-4c6e-40a8-97e3-1d5d012b4d80"),
                            ChapterNumber = 1.0,
                            ComicIdentifier = new Guid("8aa5080b-0212-4b9c-9b70-0afc2bc4b99f"),
                            UnlockPrice = 75
                        },
                        new
                        {
                            ChapterIdentifier = new Guid("dc31637b-416c-458d-9942-74fa1470ca20"),
                            ChapterNumber = 1.0,
                            ComicIdentifier = new Guid("5d34237a-f44c-4f3f-8495-2b36047e034e"),
                            UnlockPrice = 150
                        });
                });

            modelBuilder.Entity("MangaManagementAPI.Data.Models.ChapterImage", b =>
                {
                    b.Property<Guid>("ImageIdentifier")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<Guid>("ChapterIdentifier")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValue(new Guid("00000000-0000-0000-0000-000000000000"));

                    b.Property<short>("ImageNumber")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasDefaultValue((short)0);

                    b.Property<string>("ImageURL")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("VARCHAR(50)")
                        .HasDefaultValue("");

                    b.HasKey("ImageIdentifier");

                    b.HasIndex("ChapterIdentifier");

                    b.ToTable("chapter_image", (string)null);

                    b.HasData(
                        new
                        {
                            ImageIdentifier = new Guid("1753ec49-2e45-4eec-ad77-44c514f19d35"),
                            ChapterIdentifier = new Guid("3f5a415f-caa3-426b-8926-a11a55dc49b0"),
                            ImageNumber = (short)1,
                            ImageURL = "C:\\Users\\USER\\Downloads\\pic1.jpg"
                        },
                        new
                        {
                            ImageIdentifier = new Guid("d531039b-1797-4b16-9302-349a6b13b331"),
                            ChapterIdentifier = new Guid("ef26e85e-4bd5-414f-9a2b-40bc43534523"),
                            ImageNumber = (short)1,
                            ImageURL = "C:\\Users\\USER\\Downloads\\pic1.jpg"
                        },
                        new
                        {
                            ImageIdentifier = new Guid("27cddd0a-a8b2-4173-b951-0bedac4ce505"),
                            ChapterIdentifier = new Guid("94f15b6a-a89b-4546-82a4-98098bab83ff"),
                            ImageNumber = (short)1,
                            ImageURL = "C:\\Users\\USER\\Downloads\\pic1.jpg"
                        },
                        new
                        {
                            ImageIdentifier = new Guid("ef7ff0f1-ae92-4887-b7fe-b93a43f36399"),
                            ChapterIdentifier = new Guid("ab9d0e26-4c6e-40a8-97e3-1d5d012b4d80"),
                            ImageNumber = (short)1,
                            ImageURL = "C:\\Users\\USER\\Downloads\\pic1.jpg"
                        },
                        new
                        {
                            ImageIdentifier = new Guid("ad981387-1e98-4036-8934-868c5e0880a9"),
                            ChapterIdentifier = new Guid("dc31637b-416c-458d-9942-74fa1470ca20"),
                            ImageNumber = (short)1,
                            ImageURL = "C:\\Users\\USER\\Downloads\\pic1.jpg"
                        });
                });

            modelBuilder.Entity("MangaManagementAPI.Data.Models.Comic", b =>
                {
                    b.Property<Guid>("ComicIdentifier")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<string>("Avatar")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("VARCHAR(50)")
                        .HasDefaultValue("");

                    b.Property<string>("Description")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("VARCHAR(200)")
                        .HasDefaultValue("");

                    b.Property<double>("LatestChapter")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("double precision")
                        .HasDefaultValue(0.0);

                    b.Property<string>("Name")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("VARCHAR(50)")
                        .HasDefaultValue("");

                    b.Property<DateOnly>("PublishDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("date")
                        .HasDefaultValueSql("CURRENT_DATE");

                    b.HasKey("ComicIdentifier");

                    b.ToTable("comic", (string)null);

                    b.HasData(
                        new
                        {
                            ComicIdentifier = new Guid("4dfe12e0-cb8a-4282-8e74-3b1e8053f787"),
                            Avatar = "C:\\Users\\USER\\Downloads\\pic1.jpg",
                            Description = "This comic follows the adventures of a group of superheroes in a universe of superpowers and evil villains.",
                            LatestChapter = 40.0,
                            Name = "atadakishta",
                            PublishDate = new DateOnly(2014, 1, 1)
                        },
                        new
                        {
                            ComicIdentifier = new Guid("aadadaf7-fc21-4559-a53c-f97eb1ba583f"),
                            Avatar = "C:\\Users\\USER\\Downloads\\pic1.jpg",
                            Description = "This comic follows the adventures of a group of fantasy heroes in a universe of magic and mysticism.",
                            LatestChapter = 8.0,
                            Name = "bouken-sha no tabi",
                            PublishDate = new DateOnly(2015, 2, 1)
                        },
                        new
                        {
                            ComicIdentifier = new Guid("8aa5080b-0212-4b9c-9b70-0afc2bc4b99f"),
                            Avatar = "C:\\Users\\USER\\Downloads\\pic1.jpg",
                            Description = "This comic follows the adventures of a group of sci-fi heroes in a universe of advanced technology and alien civilizations.",
                            LatestChapter = 13.0,
                            Name = "eiyu no chi",
                            PublishDate = new DateOnly(2016, 3, 1)
                        },
                        new
                        {
                            ComicIdentifier = new Guid("5d34237a-f44c-4f3f-8495-2b36047e034e"),
                            Avatar = "C:\\Users\\USER\\Downloads\\pic1.jpg",
                            Description = "This comic follows the adventures of a group of historical heroes in a universe of real-world events and historical figures.",
                            LatestChapter = 19.0,
                            Name = "eikan no tatakai",
                            PublishDate = new DateOnly(2017, 4, 1)
                        },
                        new
                        {
                            ComicIdentifier = new Guid("b8d6abf3-b7e0-4a20-8647-f8f4f1ac04d3"),
                            Avatar = "C:\\Users\\USER\\Downloads\\pic1.jpg",
                            Description = "This comic follows the adventures of a group of romantic heroes in a universe of love and relationships.",
                            LatestChapter = 33.0,
                            Name = "shichiryu no himitsu",
                            PublishDate = new DateOnly(2018, 4, 22)
                        });
                });

            modelBuilder.Entity("MangaManagementAPI.Data.Models.ComicCategory", b =>
                {
                    b.Property<Guid>("CategoryIdentifier")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ComicIdentifier")
                        .HasColumnType("uuid");

                    b.HasKey("CategoryIdentifier", "ComicIdentifier");

                    b.HasIndex("ComicIdentifier");

                    b.ToTable("comic_category", (string)null);

                    b.HasData(
                        new
                        {
                            CategoryIdentifier = new Guid("414e65b4-1949-48ce-a764-26fb66e95550"),
                            ComicIdentifier = new Guid("4dfe12e0-cb8a-4282-8e74-3b1e8053f787")
                        },
                        new
                        {
                            CategoryIdentifier = new Guid("1b9d5460-4c32-4703-b4bd-c52e5fb6e943"),
                            ComicIdentifier = new Guid("4dfe12e0-cb8a-4282-8e74-3b1e8053f787")
                        });
                });

            modelBuilder.Entity("MangaManagementAPI.Data.Models.ComicSaving", b =>
                {
                    b.Property<Guid>("ComicIdentifier")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserIdentifier")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("SavingTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.HasKey("ComicIdentifier", "UserIdentifier");

                    b.HasIndex("UserIdentifier");

                    b.ToTable("comic_saving", (string)null);

                    b.HasData(
                        new
                        {
                            ComicIdentifier = new Guid("b8d6abf3-b7e0-4a20-8647-f8f4f1ac04d3"),
                            UserIdentifier = new Guid("c6d20823-3d00-48a0-8074-36587bee2693"),
                            SavingTime = new DateTime(2023, 6, 3, 4, 0, 50, 854, DateTimeKind.Utc).AddTicks(8264)
                        },
                        new
                        {
                            ComicIdentifier = new Guid("5d34237a-f44c-4f3f-8495-2b36047e034e"),
                            UserIdentifier = new Guid("c6d20823-3d00-48a0-8074-36587bee2693"),
                            SavingTime = new DateTime(2023, 6, 3, 4, 0, 50, 854, DateTimeKind.Utc).AddTicks(8267)
                        },
                        new
                        {
                            ComicIdentifier = new Guid("8aa5080b-0212-4b9c-9b70-0afc2bc4b99f"),
                            UserIdentifier = new Guid("c6d20823-3d00-48a0-8074-36587bee2693"),
                            SavingTime = new DateTime(2023, 6, 3, 4, 0, 50, 854, DateTimeKind.Utc).AddTicks(8268)
                        },
                        new
                        {
                            ComicIdentifier = new Guid("4dfe12e0-cb8a-4282-8e74-3b1e8053f787"),
                            UserIdentifier = new Guid("c6d20823-3d00-48a0-8074-36587bee2693"),
                            SavingTime = new DateTime(2023, 6, 3, 4, 0, 50, 854, DateTimeKind.Utc).AddTicks(8269)
                        },
                        new
                        {
                            ComicIdentifier = new Guid("aadadaf7-fc21-4559-a53c-f97eb1ba583f"),
                            UserIdentifier = new Guid("c6d20823-3d00-48a0-8074-36587bee2693"),
                            SavingTime = new DateTime(2023, 6, 3, 4, 0, 50, 854, DateTimeKind.Utc).AddTicks(8271)
                        });
                });

            modelBuilder.Entity("MangaManagementAPI.Data.Models.ReadingHistory", b =>
                {
                    b.Property<Guid>("UserIdentifier")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ChapterIdentifier")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("LastReadingTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.HasKey("UserIdentifier", "ChapterIdentifier");

                    b.HasIndex("ChapterIdentifier");

                    b.ToTable("reading_history", (string)null);

                    b.HasData(
                        new
                        {
                            UserIdentifier = new Guid("2231dfa9-c0f7-49c9-b0af-dac2cac61c72"),
                            ChapterIdentifier = new Guid("3f5a415f-caa3-426b-8926-a11a55dc49b0"),
                            LastReadingTime = new DateTime(2023, 6, 3, 4, 0, 50, 854, DateTimeKind.Utc).AddTicks(8197)
                        },
                        new
                        {
                            UserIdentifier = new Guid("1ef67686-f4ad-48f2-b56c-c828ec53a8d5"),
                            ChapterIdentifier = new Guid("ef26e85e-4bd5-414f-9a2b-40bc43534523"),
                            LastReadingTime = new DateTime(2023, 6, 3, 4, 0, 50, 854, DateTimeKind.Utc).AddTicks(8200)
                        },
                        new
                        {
                            UserIdentifier = new Guid("2231dfa9-c0f7-49c9-b0af-dac2cac61c72"),
                            ChapterIdentifier = new Guid("ef26e85e-4bd5-414f-9a2b-40bc43534523"),
                            LastReadingTime = new DateTime(2023, 6, 3, 4, 0, 50, 854, DateTimeKind.Utc).AddTicks(8202)
                        },
                        new
                        {
                            UserIdentifier = new Guid("1ef67686-f4ad-48f2-b56c-c828ec53a8d5"),
                            ChapterIdentifier = new Guid("3f5a415f-caa3-426b-8926-a11a55dc49b0"),
                            LastReadingTime = new DateTime(2023, 6, 3, 4, 0, 50, 854, DateTimeKind.Utc).AddTicks(8204)
                        },
                        new
                        {
                            UserIdentifier = new Guid("2231dfa9-c0f7-49c9-b0af-dac2cac61c72"),
                            ChapterIdentifier = new Guid("dc31637b-416c-458d-9942-74fa1470ca20"),
                            LastReadingTime = new DateTime(2023, 6, 3, 4, 0, 50, 854, DateTimeKind.Utc).AddTicks(8205)
                        });
                });

            modelBuilder.Entity("MangaManagementAPI.Data.Models.ReviewChapter", b =>
                {
                    b.Property<Guid>("UserIdentifier")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ChapterIdentifier")
                        .HasColumnType("uuid");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("VARCHAR(200)")
                        .HasDefaultValue("");

                    b.Property<short>("RatingStar")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasDefaultValue((short)0);

                    b.Property<DateTime>("ReviewTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.HasKey("UserIdentifier", "ChapterIdentifier");

                    b.HasIndex("ChapterIdentifier");

                    b.ToTable("review_chapter", (string)null);

                    b.HasData(
                        new
                        {
                            UserIdentifier = new Guid("2231dfa9-c0f7-49c9-b0af-dac2cac61c72"),
                            ChapterIdentifier = new Guid("3f5a415f-caa3-426b-8926-a11a55dc49b0"),
                            Comment = "It's the best thing I've read in years!",
                            RatingStar = (short)5,
                            ReviewTime = new DateTime(2023, 6, 3, 4, 0, 50, 854, DateTimeKind.Utc).AddTicks(8124)
                        },
                        new
                        {
                            UserIdentifier = new Guid("1ef67686-f4ad-48f2-b56c-c828ec53a8d5"),
                            ChapterIdentifier = new Guid("3f5a415f-caa3-426b-8926-a11a55dc49b0"),
                            Comment = "It's ok, but not great.",
                            RatingStar = (short)3,
                            ReviewTime = new DateTime(2023, 6, 3, 4, 0, 50, 854, DateTimeKind.Utc).AddTicks(8127)
                        },
                        new
                        {
                            UserIdentifier = new Guid("2231dfa9-c0f7-49c9-b0af-dac2cac61c72"),
                            ChapterIdentifier = new Guid("dc31637b-416c-458d-9942-74fa1470ca20"),
                            Comment = "I didn't like it at all.",
                            RatingStar = (short)2,
                            ReviewTime = new DateTime(2023, 6, 3, 4, 0, 50, 854, DateTimeKind.Utc).AddTicks(8130)
                        },
                        new
                        {
                            UserIdentifier = new Guid("c6d20823-3d00-48a0-8074-36587bee2693"),
                            ChapterIdentifier = new Guid("ab9d0e26-4c6e-40a8-97e3-1d5d012b4d80"),
                            Comment = "It's the worst.",
                            RatingStar = (short)1,
                            ReviewTime = new DateTime(2023, 6, 3, 4, 0, 50, 854, DateTimeKind.Utc).AddTicks(8134)
                        },
                        new
                        {
                            UserIdentifier = new Guid("c6d20823-3d00-48a0-8074-36587bee2693"),
                            ChapterIdentifier = new Guid("94f15b6a-a89b-4546-82a4-98098bab83ff"),
                            Comment = "It's pretty good!",
                            RatingStar = (short)4,
                            ReviewTime = new DateTime(2023, 6, 3, 4, 0, 50, 854, DateTimeKind.Utc).AddTicks(8136)
                        });
                });

            modelBuilder.Entity("MangaManagementAPI.Data.Models.ReviewComic", b =>
                {
                    b.Property<Guid>("UserIdentifier")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ComicIdentifier")
                        .HasColumnType("uuid");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("VARCHAR(200)")
                        .HasDefaultValue("");

                    b.Property<short>("RatingStar")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasDefaultValue((short)0);

                    b.Property<DateTime>("ReviewTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.HasKey("UserIdentifier", "ComicIdentifier");

                    b.HasIndex("ComicIdentifier");

                    b.ToTable("review_comic", (string)null);

                    b.HasData(
                        new
                        {
                            UserIdentifier = new Guid("2231dfa9-c0f7-49c9-b0af-dac2cac61c72"),
                            ComicIdentifier = new Guid("5d34237a-f44c-4f3f-8495-2b36047e034e"),
                            Comment = "The artwork is amazing!",
                            RatingStar = (short)3,
                            ReviewTime = new DateTime(2023, 6, 3, 4, 0, 50, 854, DateTimeKind.Utc).AddTicks(7896)
                        },
                        new
                        {
                            UserIdentifier = new Guid("2231dfa9-c0f7-49c9-b0af-dac2cac61c72"),
                            ComicIdentifier = new Guid("8aa5080b-0212-4b9c-9b70-0afc2bc4b99f"),
                            Comment = "The story line is hard to follow.",
                            RatingStar = (short)2,
                            ReviewTime = new DateTime(2023, 6, 3, 4, 0, 50, 854, DateTimeKind.Utc).AddTicks(8037)
                        },
                        new
                        {
                            UserIdentifier = new Guid("1ef67686-f4ad-48f2-b56c-c828ec53a8d5"),
                            ComicIdentifier = new Guid("5d34237a-f44c-4f3f-8495-2b36047e034e"),
                            Comment = "I laughed so hard I cried!",
                            RatingStar = (short)5,
                            ReviewTime = new DateTime(2023, 6, 3, 4, 0, 50, 854, DateTimeKind.Utc).AddTicks(8038)
                        },
                        new
                        {
                            UserIdentifier = new Guid("1ef67686-f4ad-48f2-b56c-c828ec53a8d5"),
                            ComicIdentifier = new Guid("8aa5080b-0212-4b9c-9b70-0afc2bc4b99f"),
                            Comment = "I hated the ending.",
                            RatingStar = (short)1,
                            ReviewTime = new DateTime(2023, 6, 3, 4, 0, 50, 854, DateTimeKind.Utc).AddTicks(8040)
                        },
                        new
                        {
                            UserIdentifier = new Guid("c6d20823-3d00-48a0-8074-36587bee2693"),
                            ComicIdentifier = new Guid("8aa5080b-0212-4b9c-9b70-0afc2bc4b99f"),
                            Comment = "I wanted more action scenes.",
                            RatingStar = (short)4,
                            ReviewTime = new DateTime(2023, 6, 3, 4, 0, 50, 854, DateTimeKind.Utc).AddTicks(8044)
                        });
                });

            modelBuilder.Entity("MangaManagementAPI.Data.Models.TransactionsHistory", b =>
                {
                    b.Property<Guid>("TransactionIdentifier")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<double>("Amount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("NUMERIC(6, 0)")
                        .HasDefaultValue(0.0);

                    b.Property<DateTime>("Date")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<int>("EarnedCoin")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0);

                    b.Property<Guid>("UserIdentifier")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValue(new Guid("00000000-0000-0000-0000-000000000000"));

                    b.HasKey("TransactionIdentifier");

                    b.HasIndex("UserIdentifier");

                    b.ToTable("transaction_history", (string)null);

                    b.HasData(
                        new
                        {
                            TransactionIdentifier = new Guid("f256f2fa-579c-4495-aada-1cdcb122ae03"),
                            Amount = 100000.0,
                            Date = new DateTime(2023, 6, 3, 4, 0, 50, 854, DateTimeKind.Utc).AddTicks(7775),
                            EarnedCoin = 100,
                            UserIdentifier = new Guid("2231dfa9-c0f7-49c9-b0af-dac2cac61c72")
                        },
                        new
                        {
                            TransactionIdentifier = new Guid("e5205803-deb8-401f-8cde-58149cdcc419"),
                            Amount = 50000.0,
                            Date = new DateTime(2023, 6, 3, 4, 0, 50, 854, DateTimeKind.Utc).AddTicks(7779),
                            EarnedCoin = 50,
                            UserIdentifier = new Guid("2231dfa9-c0f7-49c9-b0af-dac2cac61c72")
                        },
                        new
                        {
                            TransactionIdentifier = new Guid("9e863f53-2515-44e5-a746-35afc78a0ca8"),
                            Amount = 200000.0,
                            Date = new DateTime(2023, 6, 3, 4, 0, 50, 854, DateTimeKind.Utc).AddTicks(7781),
                            EarnedCoin = 200,
                            UserIdentifier = new Guid("1ef67686-f4ad-48f2-b56c-c828ec53a8d5")
                        });
                });

            modelBuilder.Entity("MangaManagementAPI.Data.Models.UserInfo", b =>
                {
                    b.Property<Guid>("UserIdentifier")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<int>("AccountBalance")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0);

                    b.Property<string>("Avatar")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("VARCHAR(50)")
                        .HasDefaultValue("");

                    b.Property<DateOnly>("BirthDay")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("date")
                        .HasDefaultValueSql("CURRENT_DATE");

                    b.Property<string>("Email")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("VARCHAR(30)")
                        .HasDefaultValue("");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("VARCHAR(30)")
                        .HasDefaultValue("");

                    b.Property<int>("Gender")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(2);

                    b.Property<string>("Password")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("VARCHAR(50)")
                        .HasDefaultValue("");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("VARCHAR(13)")
                        .HasDefaultValue("");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("VARCHAR(50)")
                        .HasDefaultValue("");

                    b.HasKey("UserIdentifier");

                    b.ToTable("user_access", (string)null);

                    b.HasData(
                        new
                        {
                            UserIdentifier = new Guid("2231dfa9-c0f7-49c9-b0af-dac2cac61c72"),
                            AccountBalance = 1000,
                            Avatar = "C:\\Users\\USER\\Downloads\\pic1.jpg",
                            BirthDay = new DateOnly(2023, 6, 3),
                            Email = "johndoe@example.com",
                            FullName = "John Doe",
                            Gender = 0,
                            Password = "12345678",
                            PhoneNumber = "1234567890",
                            UserName = "John Doe"
                        },
                        new
                        {
                            UserIdentifier = new Guid("1ef67686-f4ad-48f2-b56c-c828ec53a8d5"),
                            AccountBalance = 1500,
                            Avatar = "C:\\Users\\USER\\Downloads\\pic1.jpg",
                            BirthDay = new DateOnly(2023, 6, 3),
                            Email = "janesmith@example.com",
                            FullName = "Jane Smith",
                            Gender = 1,
                            Password = "12345678",
                            PhoneNumber = "5550123456",
                            UserName = "Jane Smith"
                        },
                        new
                        {
                            UserIdentifier = new Guid("c6d20823-3d00-48a0-8074-36587bee2693"),
                            AccountBalance = 2000,
                            Avatar = "C:\\Users\\USER\\Downloads\\pic1.jpg",
                            BirthDay = new DateOnly(2023, 6, 3),
                            Email = "alicethompson@example.com",
                            FullName = "Alice Thompson",
                            Gender = 2,
                            Password = "12345678",
                            PhoneNumber = "7778889999",
                            UserName = "Alice Thompson"
                        });
                });

            modelBuilder.Entity("MangaManagementAPI.Data.Models.Chapter", b =>
                {
                    b.HasOne("MangaManagementAPI.Data.Models.Comic", "Comic")
                        .WithMany("Chapters")
                        .HasForeignKey("ComicIdentifier")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Comic");
                });

            modelBuilder.Entity("MangaManagementAPI.Data.Models.ChapterImage", b =>
                {
                    b.HasOne("MangaManagementAPI.Data.Models.Chapter", "Chapter")
                        .WithMany("ChapterImages")
                        .HasForeignKey("ChapterIdentifier")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Chapter");
                });

            modelBuilder.Entity("MangaManagementAPI.Data.Models.ComicCategory", b =>
                {
                    b.HasOne("MangaManagementAPI.Data.Models.Category", "Category")
                        .WithMany("ComicCategories")
                        .HasForeignKey("CategoryIdentifier")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MangaManagementAPI.Data.Models.Comic", "Comic")
                        .WithMany("ComicCategories")
                        .HasForeignKey("ComicIdentifier")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Category");

                    b.Navigation("Comic");
                });

            modelBuilder.Entity("MangaManagementAPI.Data.Models.ComicSaving", b =>
                {
                    b.HasOne("MangaManagementAPI.Data.Models.Comic", "Comic")
                        .WithMany("ComicSavings")
                        .HasForeignKey("ComicIdentifier")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MangaManagementAPI.Data.Models.UserInfo", "UserInfo")
                        .WithMany("ComicSavings")
                        .HasForeignKey("UserIdentifier")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Comic");

                    b.Navigation("UserInfo");
                });

            modelBuilder.Entity("MangaManagementAPI.Data.Models.ReadingHistory", b =>
                {
                    b.HasOne("MangaManagementAPI.Data.Models.Chapter", "Chapter")
                        .WithMany("ReadingHistories")
                        .HasForeignKey("ChapterIdentifier")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MangaManagementAPI.Data.Models.UserInfo", "UserInfo")
                        .WithMany("ReadingHistories")
                        .HasForeignKey("UserIdentifier")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Chapter");

                    b.Navigation("UserInfo");
                });

            modelBuilder.Entity("MangaManagementAPI.Data.Models.ReviewChapter", b =>
                {
                    b.HasOne("MangaManagementAPI.Data.Models.Chapter", "Chapter")
                        .WithMany("ReviewChapters")
                        .HasForeignKey("ChapterIdentifier")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MangaManagementAPI.Data.Models.UserInfo", "UserInfo")
                        .WithMany("ReviewChapters")
                        .HasForeignKey("UserIdentifier")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Chapter");

                    b.Navigation("UserInfo");
                });

            modelBuilder.Entity("MangaManagementAPI.Data.Models.ReviewComic", b =>
                {
                    b.HasOne("MangaManagementAPI.Data.Models.Comic", "Comic")
                        .WithMany("ReviewComics")
                        .HasForeignKey("ComicIdentifier")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MangaManagementAPI.Data.Models.UserInfo", "UserInfo")
                        .WithMany("ReviewComics")
                        .HasForeignKey("UserIdentifier")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Comic");

                    b.Navigation("UserInfo");
                });

            modelBuilder.Entity("MangaManagementAPI.Data.Models.TransactionsHistory", b =>
                {
                    b.HasOne("MangaManagementAPI.Data.Models.UserInfo", "UserInfo")
                        .WithMany("TransactionHistories")
                        .HasForeignKey("UserIdentifier")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("UserInfo");
                });

            modelBuilder.Entity("MangaManagementAPI.Data.Models.Category", b =>
                {
                    b.Navigation("ComicCategories");
                });

            modelBuilder.Entity("MangaManagementAPI.Data.Models.Chapter", b =>
                {
                    b.Navigation("ChapterImages");

                    b.Navigation("ReadingHistories");

                    b.Navigation("ReviewChapters");
                });

            modelBuilder.Entity("MangaManagementAPI.Data.Models.Comic", b =>
                {
                    b.Navigation("Chapters");

                    b.Navigation("ComicCategories");

                    b.Navigation("ComicSavings");

                    b.Navigation("ReviewComics");
                });

            modelBuilder.Entity("MangaManagementAPI.Data.Models.UserInfo", b =>
                {
                    b.Navigation("ComicSavings");

                    b.Navigation("ReadingHistories");

                    b.Navigation("ReviewChapters");

                    b.Navigation("ReviewComics");

                    b.Navigation("TransactionHistories");
                });
#pragma warning restore 612, 618
        }
    }
}
