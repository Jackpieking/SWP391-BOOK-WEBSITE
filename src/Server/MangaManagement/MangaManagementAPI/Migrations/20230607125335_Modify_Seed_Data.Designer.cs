// <auto-generated />
using System;
using DataAccessLayer.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;

#nullable disable

namespace DataAccessLayer.Migrations
{
    [DbContext(typeof(MangaContext))]
    [Migration("20230607125335_Modify_Seed_Data")]
    partial class Modify_Seed_Data
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("MangaManagementAPI.Data.Entites.Category", b =>
                {
                    b.Property<Guid>("CategoryIdentifier")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<string>("Description")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("VARCHAR(500)")
                        .HasDefaultValue("");

                    b.Property<string>("Name")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("VARCHAR(50)")
                        .HasDefaultValue("");

                    b.HasKey("CategoryIdentifier");

                    b.ToTable("category", (string)null);

                    b.HasData(
                        new
                        {
                            CategoryIdentifier = new Guid("414e65b4-1949-48ce-a764-26fb66e95550"),
                            Description = "Thể loại theo sau một tội ác (như giết người hoặc mất tích) từ thời điểm nó được thực hiện cho đến thời điểm nó được giải quyết",
                            Name = "Mystery"
                        },
                        new
                        {
                            CategoryIdentifier = new Guid("1b9d5460-4c32-4703-b4bd-c52e5fb6e943"),
                            Description = " Thường đề cập đến một loại tiểu thuyết thuộc thể loại viễn tưởng tập trung chủ yếu vào mối quan hệ và tình yêu lãng mạn giữa hai người, và thường có một kết thúc lạc quan và thỏa mãn về mặt cảm xúc",
                            Name = "Romance"
                        },
                        new
                        {
                            CategoryIdentifier = new Guid("ad2149ef-ac21-4759-88d8-e586e850e299"),
                            Description = "Lấy bối cảnh là một giai đoạn lịch sử và cố gắng truyền đạt tinh thần, cách cư xử và điều kiện xã hội của một thời đại đã qua với các chi tiết hiện thực và sự trung thực (trong một số trường hợp chỉ là sự trung thực bề ngoài) với sự thật lịch sử",
                            Name = "Historical"
                        },
                        new
                        {
                            CategoryIdentifier = new Guid("edc6e266-7b95-4723-a420-8e51a78d99bc"),
                            Description = "Phương thức cụ thể của tiểu thuyết được thể hiện trong biểu diễn: một vở kịch, opera, kịch câm, múa ba lê, v.v., được trình diễn trong rạp hát, hoặc trên đài phát thanh hoặc truyền hình",
                            Name = "Drama"
                        },
                        new
                        {
                            CategoryIdentifier = new Guid("72522ef6-6633-4519-872b-36bc0675e328"),
                            Description = "Một thể loại của tiểu thuyết suy đoán liên quan đến các yếu tố ma thuật, thường lấy bối cảnh trong một vũ trụ hư cấu và đôi khi lấy cảm hứng từ thần thoại và văn hóa dân gian",
                            Name = "Fantasy"
                        },
                        new
                        {
                            CategoryIdentifier = new Guid("ddebafec-b0a5-49c6-ac6c-261079080dce"),
                            Description = "Thể loại bao gồm những cuốn sách mà nhân vật chính thực hiện một cuộc hành trình sử thi, về mặt cá nhân hoặc địa lý",
                            Name = "Adventure"
                        },
                        new
                        {
                            CategoryIdentifier = new Guid("322dbf35-54aa-416e-b121-42fc20b9d94b"),
                            Description = "Một thể loại biên tập truyện tranh Nhật Bản nhắm đến đối tượng là các cậu bé vị thành niên",
                            Name = "Shounen"
                        });
                });

            modelBuilder.Entity("MangaManagementAPI.Data.Entites.Chapter", b =>
                {
                    b.Property<Guid>("ChapterIdentifier")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<double>("ChapterNumber")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("double precision")
                        .HasDefaultValue(0.0);

                    b.Property<Guid>("ComicIdentifier")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValue(new Guid("00000000-0000-0000-0000-000000000000"));

                    b.Property<int>("UnlockPrice")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0);

                    b.HasKey("ChapterIdentifier");

                    b.HasIndex("ComicIdentifier");

                    b.ToTable("chapter", (string)null);

                    b.HasData(
                        new
                        {
                            ChapterIdentifier = new Guid("3f5a415f-caa3-426b-8926-a11a55dc49b0"),
                            ChapterNumber = 1.0,
                            ComicIdentifier = new Guid("4dfe12e0-cb8a-4282-8e74-3b1e8053f787"),
                            UnlockPrice = 0
                        },
                        new
                        {
                            ChapterIdentifier = new Guid("ef26e85e-4bd5-414f-9a2b-40bc43534523"),
                            ChapterNumber = 1.0,
                            ComicIdentifier = new Guid("b8d6abf3-b7e0-4a20-8647-f8f4f1ac04d3"),
                            UnlockPrice = 0
                        },
                        new
                        {
                            ChapterIdentifier = new Guid("94f15b6a-a89b-4546-82a4-98098bab83ff"),
                            ChapterNumber = 1.0,
                            ComicIdentifier = new Guid("aadadaf7-fc21-4559-a53c-f97eb1ba583f"),
                            UnlockPrice = 0
                        },
                        new
                        {
                            ChapterIdentifier = new Guid("ab9d0e26-4c6e-40a8-97e3-1d5d012b4d80"),
                            ChapterNumber = 1.0,
                            ComicIdentifier = new Guid("8aa5080b-0212-4b9c-9b70-0afc2bc4b99f"),
                            UnlockPrice = 0
                        },
                        new
                        {
                            ChapterIdentifier = new Guid("dc31637b-416c-458d-9942-74fa1470ca20"),
                            ChapterNumber = 1.0,
                            ComicIdentifier = new Guid("5d34237a-f44c-4f3f-8495-2b36047e034e"),
                            UnlockPrice = 0
                        });
                });

            modelBuilder.Entity("MangaManagementAPI.Data.Entites.ChapterImage", b =>
                {
                    b.Property<Guid>("ImageIdentifier")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<Guid>("ChapterIdentifier")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValue(new Guid("00000000-0000-0000-0000-000000000000"));

                    b.Property<short>("ImageNumber")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasDefaultValue((short)0);

                    b.Property<string>("ImageURL")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("VARCHAR(50)")
                        .HasDefaultValue("");

                    b.HasKey("ImageIdentifier");

                    b.HasIndex("ChapterIdentifier");

                    b.ToTable("chapter_image", (string)null);

                    b.HasData(
                        new
                        {
                            ImageIdentifier = new Guid("1753ec49-2e45-4eec-ad77-44c514f19d35"),
                            ChapterIdentifier = new Guid("3f5a415f-caa3-426b-8926-a11a55dc49b0"),
                            ImageNumber = (short)1,
                            ImageURL = "C:\\Users\\USER\\Downloads\\pic1.jpg"
                        },
                        new
                        {
                            ImageIdentifier = new Guid("d531039b-1797-4b16-9302-349a6b13b331"),
                            ChapterIdentifier = new Guid("ef26e85e-4bd5-414f-9a2b-40bc43534523"),
                            ImageNumber = (short)1,
                            ImageURL = "C:\\Users\\USER\\Downloads\\pic1.jpg"
                        },
                        new
                        {
                            ImageIdentifier = new Guid("27cddd0a-a8b2-4173-b951-0bedac4ce505"),
                            ChapterIdentifier = new Guid("94f15b6a-a89b-4546-82a4-98098bab83ff"),
                            ImageNumber = (short)1,
                            ImageURL = "C:\\Users\\USER\\Downloads\\pic1.jpg"
                        },
                        new
                        {
                            ImageIdentifier = new Guid("ef7ff0f1-ae92-4887-b7fe-b93a43f36399"),
                            ChapterIdentifier = new Guid("ab9d0e26-4c6e-40a8-97e3-1d5d012b4d80"),
                            ImageNumber = (short)1,
                            ImageURL = "C:\\Users\\USER\\Downloads\\pic1.jpg"
                        },
                        new
                        {
                            ImageIdentifier = new Guid("ad981387-1e98-4036-8934-868c5e0880a9"),
                            ChapterIdentifier = new Guid("dc31637b-416c-458d-9942-74fa1470ca20"),
                            ImageNumber = (short)1,
                            ImageURL = "C:\\Users\\USER\\Downloads\\pic1.jpg"
                        });
                });

            modelBuilder.Entity("MangaManagementAPI.Data.Entites.Comic", b =>
                {
                    b.Property<Guid>("ComicIdentifier")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<string>("Avatar")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("VARCHAR(50)")
                        .HasDefaultValue("");

                    b.Property<string>("Description")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("VARCHAR(1000)")
                        .HasDefaultValue("");

                    b.Property<double>("LatestChapter")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("double precision")
                        .HasDefaultValue(0.0);

                    b.Property<string>("Name")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("VARCHAR(50)")
                        .HasDefaultValue("");

                    b.Property<DateOnly>("PublishDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("date")
                        .HasDefaultValueSql("CURRENT_DATE");

                    b.HasKey("ComicIdentifier");

                    b.ToTable("comic", (string)null);

                    b.HasData(
                        new
                        {
                            ComicIdentifier = new Guid("4dfe12e0-cb8a-4282-8e74-3b1e8053f787"),
                            Avatar = "Thanh_Gươm_Diệt_Quỷ.jpg",
                            Description = "Kimetsu no Yaiba – Tanjirou là con cả của gia đình vừa mất cha. Một ngày nọ, Tanjirou đến thăm thị trấn khác để bán than, khi đêm về cậu ở nghỉ tại nhà người khác thay vì về nhà vì lời đồn thổi về ác quỷ luôn rình mò gần núi vào buổi tối. Khi cậu về nhà vào ngày hôm sau, bị kịch đang đợi chờ cậu…",
                            LatestChapter = 205.59999999999999,
                            Name = "Thanh Gươm Diệt Quỷ",
                            PublishDate = new DateOnly(2016, 11, 2)
                        },
                        new
                        {
                            ComicIdentifier = new Guid("aadadaf7-fc21-4559-a53c-f97eb1ba583f"),
                            Avatar = "Hội_Pháp_Sư_Nhiệm_Vụ_Trăm_Năm.jpg",
                            Description = "Tuyện tiếp nối chap 545 của Fairy Tail, khi nhóm Natsu đi làm nhiệm vụ trăm năm.",
                            LatestChapter = 132.0,
                            Name = "Hội Pháp Sư Nhiệm Vụ Trăm Năm",
                            PublishDate = new DateOnly(2018, 7, 25)
                        },
                        new
                        {
                            ComicIdentifier = new Guid("8aa5080b-0212-4b9c-9b70-0afc2bc4b99f"),
                            Avatar = "Onepunch_Man.jpg",
                            Description = "Onepunch-Man là một Manga thể loại siêu anh hùng với đặc trưng phồng tôm đấm phát chết luôn… Lol!!! Nhân vật chính trong Onepunch-man là Saitama, một con người mà nhìn đâu cũng thấy “tầm thường”, từ khuôn mặt vô hồn, cái đầu trọc lóc, cho tới thể hình long tong. Tuy nhiên, con người nhìn thì tầm thường này lại chuyên giải quyết những vấn đề hết sức bất thường. Anh thực chất chính là một siêu anh hùng luôn tìm kiếm cho mình một đối thủ mạnh. Vấn đề là, cứ mỗi lần bắt gặp một đối thủ tiềm năng, thì đối thủ nào cũng như đối thủ nào, chỉ ăn một đấm của anh là… chết luôn. Liệu rằng Onepunch-Man Saitaman có thể tìm được cho mình một kẻ ác dữ dằn đủ sức đấu với anh? Hãy theo bước Saitama trên con đường một đấm tìm đối cực kỳ hài hước của anh!!\r\n\r\n",
                            LatestChapter = 232.0,
                            Name = "Onepunch Man",
                            PublishDate = new DateOnly(2018, 3, 26)
                        },
                        new
                        {
                            ComicIdentifier = new Guid("5d34237a-f44c-4f3f-8495-2b36047e034e"),
                            Avatar = "Black_Clover_Thế_Giới_Phép_Thuật.jpg",
                            Description = "Aster và Yuno là hai đứa trẻ bị bỏ rơi ở nhà thờ và cùng nhau lớn lên tại đó. Khi còn nhỏ, chúng đã hứa với nhau xem ai sẽ trở thành Ma pháp vương tiếp theo. Thế nhưng, khi cả hai lớn lên, mọi sô chuyện đã thay đổi. Yuno là thiên tài ma pháp với sức mạnh tuyệt đỉnh trong khi Aster lại không thể sử dụng ma pháp và cố gắng bù đắp bằng thể lực. Khi cả hai được nhận sách phép vào tuổi 15, Yuno đã được ban cuốn sách phép cỏ bốn bá (trong khi đa số là cỏ ba lá) mà Aster lại không có cuốn nào. Tuy nhiên, khi Yuno bị đe dọa, sự thật về sức mạnh của Aster đã được giải mã- cậu ta được ban cuốn sách phép cỏ năm lá, cuốn sách phá ma thuật màu đen. Bấy giờ, hai người bạn trẻ đang hướng ra thế giới, cùng chung mục tiêu.",
                            LatestChapter = 360.0,
                            Name = "Black Clover - Thế Giới Phép Thuật",
                            PublishDate = new DateOnly(2015, 4, 18)
                        },
                        new
                        {
                            ComicIdentifier = new Guid("b8d6abf3-b7e0-4a20-8647-f8f4f1ac04d3"),
                            Avatar = "Thần_Y_Đích_Nữ.jpg",
                            Description = "Một nữ quân y đặc cấp trong bộ đội lục chiến, thánh thủ trung tây y, tinh thông võ thuật, tiễn thuật vì một tai nạn trên không mà xuyên không về lịch sử. Mang trên mình mối thù, nàng sẽ làm gì đây?",
                            LatestChapter = 302.0,
                            Name = "Thần Y Đích Nữ",
                            PublishDate = new DateOnly(2016, 5, 26)
                        });
                });

            modelBuilder.Entity("MangaManagementAPI.Data.Entites.ComicCategory", b =>
                {
                    b.Property<Guid>("CategoryIdentifier")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ComicIdentifier")
                        .HasColumnType("uuid");

                    b.HasKey("CategoryIdentifier", "ComicIdentifier");

                    b.HasIndex("ComicIdentifier");

                    b.ToTable("comic_category", (string)null);

                    b.HasData(
                        new
                        {
                            CategoryIdentifier = new Guid("edc6e266-7b95-4723-a420-8e51a78d99bc"),
                            ComicIdentifier = new Guid("4dfe12e0-cb8a-4282-8e74-3b1e8053f787")
                        },
                        new
                        {
                            CategoryIdentifier = new Guid("72522ef6-6633-4519-872b-36bc0675e328"),
                            ComicIdentifier = new Guid("4dfe12e0-cb8a-4282-8e74-3b1e8053f787")
                        },
                        new
                        {
                            CategoryIdentifier = new Guid("322dbf35-54aa-416e-b121-42fc20b9d94b"),
                            ComicIdentifier = new Guid("4dfe12e0-cb8a-4282-8e74-3b1e8053f787")
                        },
                        new
                        {
                            CategoryIdentifier = new Guid("1b9d5460-4c32-4703-b4bd-c52e5fb6e943"),
                            ComicIdentifier = new Guid("4dfe12e0-cb8a-4282-8e74-3b1e8053f787")
                        },
                        new
                        {
                            CategoryIdentifier = new Guid("ad2149ef-ac21-4759-88d8-e586e850e299"),
                            ComicIdentifier = new Guid("4dfe12e0-cb8a-4282-8e74-3b1e8053f787")
                        },
                        new
                        {
                            CategoryIdentifier = new Guid("ddebafec-b0a5-49c6-ac6c-261079080dce"),
                            ComicIdentifier = new Guid("aadadaf7-fc21-4559-a53c-f97eb1ba583f")
                        },
                        new
                        {
                            CategoryIdentifier = new Guid("72522ef6-6633-4519-872b-36bc0675e328"),
                            ComicIdentifier = new Guid("aadadaf7-fc21-4559-a53c-f97eb1ba583f")
                        },
                        new
                        {
                            CategoryIdentifier = new Guid("ddebafec-b0a5-49c6-ac6c-261079080dce"),
                            ComicIdentifier = new Guid("8aa5080b-0212-4b9c-9b70-0afc2bc4b99f")
                        },
                        new
                        {
                            CategoryIdentifier = new Guid("322dbf35-54aa-416e-b121-42fc20b9d94b"),
                            ComicIdentifier = new Guid("8aa5080b-0212-4b9c-9b70-0afc2bc4b99f")
                        },
                        new
                        {
                            CategoryIdentifier = new Guid("edc6e266-7b95-4723-a420-8e51a78d99bc"),
                            ComicIdentifier = new Guid("5d34237a-f44c-4f3f-8495-2b36047e034e")
                        },
                        new
                        {
                            CategoryIdentifier = new Guid("72522ef6-6633-4519-872b-36bc0675e328"),
                            ComicIdentifier = new Guid("5d34237a-f44c-4f3f-8495-2b36047e034e")
                        },
                        new
                        {
                            CategoryIdentifier = new Guid("322dbf35-54aa-416e-b121-42fc20b9d94b"),
                            ComicIdentifier = new Guid("5d34237a-f44c-4f3f-8495-2b36047e034e")
                        },
                        new
                        {
                            CategoryIdentifier = new Guid("414e65b4-1949-48ce-a764-26fb66e95550"),
                            ComicIdentifier = new Guid("5d34237a-f44c-4f3f-8495-2b36047e034e")
                        },
                        new
                        {
                            CategoryIdentifier = new Guid("1b9d5460-4c32-4703-b4bd-c52e5fb6e943"),
                            ComicIdentifier = new Guid("b8d6abf3-b7e0-4a20-8647-f8f4f1ac04d3")
                        },
                        new
                        {
                            CategoryIdentifier = new Guid("414e65b4-1949-48ce-a764-26fb66e95550"),
                            ComicIdentifier = new Guid("b8d6abf3-b7e0-4a20-8647-f8f4f1ac04d3")
                        });
                });

            modelBuilder.Entity("MangaManagementAPI.Data.Entites.ComicSaving", b =>
                {
                    b.Property<Guid>("ComicIdentifier")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserIdentifier")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("SavingTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.HasKey("ComicIdentifier", "UserIdentifier");

                    b.HasIndex("UserIdentifier");

                    b.ToTable("comic_saving", (string)null);

                    b.HasData(
                        new
                        {
                            ComicIdentifier = new Guid("b8d6abf3-b7e0-4a20-8647-f8f4f1ac04d3"),
                            UserIdentifier = new Guid("c6d20823-3d00-48a0-8074-36587bee2693"),
                            SavingTime = new DateTime(2023, 6, 7, 12, 53, 35, 196, DateTimeKind.Utc).AddTicks(7690)
                        },
                        new
                        {
                            ComicIdentifier = new Guid("5d34237a-f44c-4f3f-8495-2b36047e034e"),
                            UserIdentifier = new Guid("c6d20823-3d00-48a0-8074-36587bee2693"),
                            SavingTime = new DateTime(2023, 6, 7, 12, 53, 35, 196, DateTimeKind.Utc).AddTicks(7693)
                        },
                        new
                        {
                            ComicIdentifier = new Guid("8aa5080b-0212-4b9c-9b70-0afc2bc4b99f"),
                            UserIdentifier = new Guid("c6d20823-3d00-48a0-8074-36587bee2693"),
                            SavingTime = new DateTime(2023, 6, 7, 12, 53, 35, 196, DateTimeKind.Utc).AddTicks(7695)
                        },
                        new
                        {
                            ComicIdentifier = new Guid("4dfe12e0-cb8a-4282-8e74-3b1e8053f787"),
                            UserIdentifier = new Guid("c6d20823-3d00-48a0-8074-36587bee2693"),
                            SavingTime = new DateTime(2023, 6, 7, 12, 53, 35, 196, DateTimeKind.Utc).AddTicks(7696)
                        },
                        new
                        {
                            ComicIdentifier = new Guid("aadadaf7-fc21-4559-a53c-f97eb1ba583f"),
                            UserIdentifier = new Guid("c6d20823-3d00-48a0-8074-36587bee2693"),
                            SavingTime = new DateTime(2023, 6, 7, 12, 53, 35, 196, DateTimeKind.Utc).AddTicks(7698)
                        });
                });

            modelBuilder.Entity("MangaManagementAPI.Data.Entites.ReadingHistory", b =>
                {
                    b.Property<Guid>("UserIdentifier")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ChapterIdentifier")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("LastReadingTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.HasKey("UserIdentifier", "ChapterIdentifier");

                    b.HasIndex("ChapterIdentifier");

                    b.ToTable("reading_history", (string)null);

                    b.HasData(
                        new
                        {
                            UserIdentifier = new Guid("2231dfa9-c0f7-49c9-b0af-dac2cac61c72"),
                            ChapterIdentifier = new Guid("3f5a415f-caa3-426b-8926-a11a55dc49b0"),
                            LastReadingTime = new DateTime(2023, 6, 7, 12, 53, 35, 196, DateTimeKind.Utc).AddTicks(6773)
                        },
                        new
                        {
                            UserIdentifier = new Guid("1ef67686-f4ad-48f2-b56c-c828ec53a8d5"),
                            ChapterIdentifier = new Guid("ef26e85e-4bd5-414f-9a2b-40bc43534523"),
                            LastReadingTime = new DateTime(2023, 6, 7, 12, 53, 35, 196, DateTimeKind.Utc).AddTicks(6812)
                        },
                        new
                        {
                            UserIdentifier = new Guid("2231dfa9-c0f7-49c9-b0af-dac2cac61c72"),
                            ChapterIdentifier = new Guid("ef26e85e-4bd5-414f-9a2b-40bc43534523"),
                            LastReadingTime = new DateTime(2023, 6, 7, 12, 53, 35, 196, DateTimeKind.Utc).AddTicks(6813)
                        },
                        new
                        {
                            UserIdentifier = new Guid("1ef67686-f4ad-48f2-b56c-c828ec53a8d5"),
                            ChapterIdentifier = new Guid("3f5a415f-caa3-426b-8926-a11a55dc49b0"),
                            LastReadingTime = new DateTime(2023, 6, 7, 12, 53, 35, 196, DateTimeKind.Utc).AddTicks(6815)
                        },
                        new
                        {
                            UserIdentifier = new Guid("2231dfa9-c0f7-49c9-b0af-dac2cac61c72"),
                            ChapterIdentifier = new Guid("dc31637b-416c-458d-9942-74fa1470ca20"),
                            LastReadingTime = new DateTime(2023, 6, 7, 12, 53, 35, 196, DateTimeKind.Utc).AddTicks(6817)
                        });
                });

            modelBuilder.Entity("MangaManagementAPI.Data.Entites.ReviewChapter", b =>
                {
                    b.Property<Guid>("UserIdentifier")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ChapterIdentifier")
                        .HasColumnType("uuid");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("VARCHAR(200)")
                        .HasDefaultValue("");

                    b.Property<short>("RatingStar")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasDefaultValue((short)0);

                    b.Property<DateTime>("ReviewTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.HasKey("UserIdentifier", "ChapterIdentifier");

                    b.HasIndex("ChapterIdentifier");

                    b.ToTable("review_chapter", (string)null);

                    b.HasData(
                        new
                        {
                            UserIdentifier = new Guid("2231dfa9-c0f7-49c9-b0af-dac2cac61c72"),
                            ChapterIdentifier = new Guid("3f5a415f-caa3-426b-8926-a11a55dc49b0"),
                            Comment = "Nó hay vãi",
                            RatingStar = (short)5,
                            ReviewTime = new DateTime(2023, 6, 7, 12, 53, 35, 196, DateTimeKind.Utc).AddTicks(6699)
                        },
                        new
                        {
                            UserIdentifier = new Guid("1ef67686-f4ad-48f2-b56c-c828ec53a8d5"),
                            ChapterIdentifier = new Guid("3f5a415f-caa3-426b-8926-a11a55dc49b0"),
                            Comment = "Art đẹp, nhưng cốt truyện không hay",
                            RatingStar = (short)3,
                            ReviewTime = new DateTime(2023, 6, 7, 12, 53, 35, 196, DateTimeKind.Utc).AddTicks(6702)
                        },
                        new
                        {
                            UserIdentifier = new Guid("2231dfa9-c0f7-49c9-b0af-dac2cac61c72"),
                            ChapterIdentifier = new Guid("dc31637b-416c-458d-9942-74fa1470ca20"),
                            Comment = "Art tạm tạm",
                            RatingStar = (short)2,
                            ReviewTime = new DateTime(2023, 6, 7, 12, 53, 35, 196, DateTimeKind.Utc).AddTicks(6705)
                        },
                        new
                        {
                            UserIdentifier = new Guid("c6d20823-3d00-48a0-8074-36587bee2693"),
                            ChapterIdentifier = new Guid("ab9d0e26-4c6e-40a8-97e3-1d5d012b4d80"),
                            Comment = "Meh không ổn tí nào",
                            RatingStar = (short)1,
                            ReviewTime = new DateTime(2023, 6, 7, 12, 53, 35, 196, DateTimeKind.Utc).AddTicks(6707)
                        },
                        new
                        {
                            UserIdentifier = new Guid("c6d20823-3d00-48a0-8074-36587bee2693"),
                            ChapterIdentifier = new Guid("94f15b6a-a89b-4546-82a4-98098bab83ff"),
                            Comment = "Được phết",
                            RatingStar = (short)4,
                            ReviewTime = new DateTime(2023, 6, 7, 12, 53, 35, 196, DateTimeKind.Utc).AddTicks(6708)
                        });
                });

            modelBuilder.Entity("MangaManagementAPI.Data.Entites.ReviewComic", b =>
                {
                    b.Property<Guid>("UserIdentifier")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ComicIdentifier")
                        .HasColumnType("uuid");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("VARCHAR(200)")
                        .HasDefaultValue("");

                    b.Property<short>("RatingStar")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasDefaultValue((short)0);

                    b.Property<DateTime>("ReviewTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.HasKey("UserIdentifier", "ComicIdentifier");

                    b.HasIndex("ComicIdentifier");

                    b.ToTable("review_comic", (string)null);

                    b.HasData(
                        new
                        {
                            UserIdentifier = new Guid("2231dfa9-c0f7-49c9-b0af-dac2cac61c72"),
                            ComicIdentifier = new Guid("5d34237a-f44c-4f3f-8495-2b36047e034e"),
                            Comment = "Tổng quan về cốt truyện ở mức ổn",
                            RatingStar = (short)3,
                            ReviewTime = new DateTime(2023, 6, 7, 12, 53, 35, 196, DateTimeKind.Utc).AddTicks(6619)
                        },
                        new
                        {
                            UserIdentifier = new Guid("2231dfa9-c0f7-49c9-b0af-dac2cac61c72"),
                            ComicIdentifier = new Guid("8aa5080b-0212-4b9c-9b70-0afc2bc4b99f"),
                            Comment = "Cốt truyện khó hiểu",
                            RatingStar = (short)2,
                            ReviewTime = new DateTime(2023, 6, 7, 12, 53, 35, 196, DateTimeKind.Utc).AddTicks(6623)
                        },
                        new
                        {
                            UserIdentifier = new Guid("1ef67686-f4ad-48f2-b56c-c828ec53a8d5"),
                            ComicIdentifier = new Guid("5d34237a-f44c-4f3f-8495-2b36047e034e"),
                            Comment = "Cười vãi",
                            RatingStar = (short)5,
                            ReviewTime = new DateTime(2023, 6, 7, 12, 53, 35, 196, DateTimeKind.Utc).AddTicks(6625)
                        },
                        new
                        {
                            UserIdentifier = new Guid("1ef67686-f4ad-48f2-b56c-c828ec53a8d5"),
                            ComicIdentifier = new Guid("8aa5080b-0212-4b9c-9b70-0afc2bc4b99f"),
                            Comment = "Tui muốn gud end",
                            RatingStar = (short)1,
                            ReviewTime = new DateTime(2023, 6, 7, 12, 53, 35, 196, DateTimeKind.Utc).AddTicks(6627)
                        },
                        new
                        {
                            UserIdentifier = new Guid("c6d20823-3d00-48a0-8074-36587bee2693"),
                            ComicIdentifier = new Guid("8aa5080b-0212-4b9c-9b70-0afc2bc4b99f"),
                            Comment = "Đánh nhau ít nhưng tổng quan vẫn OK",
                            RatingStar = (short)4,
                            ReviewTime = new DateTime(2023, 6, 7, 12, 53, 35, 196, DateTimeKind.Utc).AddTicks(6629)
                        });
                });

            modelBuilder.Entity("MangaManagementAPI.Data.Entites.TransactionsHistory", b =>
                {
                    b.Property<Guid>("TransactionIdentifier")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<double>("Amount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("NUMERIC(6, 0)")
                        .HasDefaultValue(0.0);

                    b.Property<DateTime>("Date")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<int>("EarnedCoin")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0);

                    b.Property<Guid>("UserIdentifier")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValue(new Guid("00000000-0000-0000-0000-000000000000"));

                    b.HasKey("TransactionIdentifier");

                    b.HasIndex("UserIdentifier");

                    b.ToTable("transaction_history", (string)null);

                    b.HasData(
                        new
                        {
                            TransactionIdentifier = new Guid("42b6cb40-8369-4620-bf3b-d31c49a9284c"),
                            Amount = 100000.0,
                            Date = new DateTime(2023, 6, 7, 12, 53, 35, 196, DateTimeKind.Utc).AddTicks(6542),
                            EarnedCoin = 100,
                            UserIdentifier = new Guid("2231dfa9-c0f7-49c9-b0af-dac2cac61c72")
                        },
                        new
                        {
                            TransactionIdentifier = new Guid("dd11cb5d-5665-4f02-b9c0-28fc303c12a1"),
                            Amount = 50000.0,
                            Date = new DateTime(2023, 6, 7, 12, 53, 35, 196, DateTimeKind.Utc).AddTicks(6547),
                            EarnedCoin = 50,
                            UserIdentifier = new Guid("2231dfa9-c0f7-49c9-b0af-dac2cac61c72")
                        },
                        new
                        {
                            TransactionIdentifier = new Guid("72b35d60-35f4-43ae-8eb2-5840e711329e"),
                            Amount = 200000.0,
                            Date = new DateTime(2023, 6, 7, 12, 53, 35, 196, DateTimeKind.Utc).AddTicks(6550),
                            EarnedCoin = 200,
                            UserIdentifier = new Guid("1ef67686-f4ad-48f2-b56c-c828ec53a8d5")
                        });
                });

            modelBuilder.Entity("MangaManagementAPI.Data.Entites.UserInfo", b =>
                {
                    b.Property<Guid>("UserIdentifier")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<int>("AccountBalance")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0);

                    b.Property<string>("Avatar")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("VARCHAR(50)")
                        .HasDefaultValue("");

                    b.Property<DateOnly>("BirthDay")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("date")
                        .HasDefaultValueSql("CURRENT_DATE");

                    b.Property<string>("Email")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("VARCHAR(30)")
                        .HasDefaultValue("");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("VARCHAR(30)")
                        .HasDefaultValue("");

                    b.Property<int>("Gender")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(2);

                    b.Property<string>("Password")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("VARCHAR(50)")
                        .HasDefaultValue("");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("VARCHAR(13)")
                        .HasDefaultValue("");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("VARCHAR(50)")
                        .HasDefaultValue("");

                    b.HasKey("UserIdentifier");

                    b.ToTable("user_access", (string)null);

                    b.HasData(
                        new
                        {
                            UserIdentifier = new Guid("2231dfa9-c0f7-49c9-b0af-dac2cac61c72"),
                            AccountBalance = 30,
                            Avatar = "",
                            BirthDay = new DateOnly(2003, 12, 3),
                            Email = "ledinhdangkhoa10a9@gmail.com",
                            FullName = "Lê Đình Đăng Khoa",
                            Gender = 0,
                            Password = "Jackpie2003",
                            PhoneNumber = "0706042250",
                            UserName = "Jackpieking"
                        },
                        new
                        {
                            UserIdentifier = new Guid("1ef67686-f4ad-48f2-b56c-c828ec53a8d5"),
                            AccountBalance = 100,
                            Avatar = "",
                            BirthDay = new DateOnly(2003, 4, 2),
                            Email = "nghialt123@gmail.com",
                            FullName = "Lee Trung Nghĩa",
                            Gender = 0,
                            Password = "NghiaLe123",
                            PhoneNumber = "0903591555",
                            UserName = "wibulord"
                        },
                        new
                        {
                            UserIdentifier = new Guid("c6d20823-3d00-48a0-8074-36587bee2693"),
                            AccountBalance = 0,
                            Avatar = "",
                            BirthDay = new DateOnly(2003, 8, 15),
                            Email = "lamvd@gmail.com",
                            FullName = "Võ Đại Lâm",
                            Gender = 0,
                            Password = "Lam123",
                            PhoneNumber = "02343883333",
                            UserName = "lamvd"
                        });
                });

            modelBuilder.Entity("MangaManagementAPI.Data.Entites.Chapter", b =>
                {
                    b.HasOne("MangaManagementAPI.Data.Entites.Comic", "Comic")
                        .WithMany("Chapters")
                        .HasForeignKey("ComicIdentifier")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Comic");
                });

            modelBuilder.Entity("MangaManagementAPI.Data.Entites.ChapterImage", b =>
                {
                    b.HasOne("MangaManagementAPI.Data.Entites.Chapter", "Chapter")
                        .WithMany("ChapterImages")
                        .HasForeignKey("ChapterIdentifier")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Chapter");
                });

            modelBuilder.Entity("MangaManagementAPI.Data.Entites.ComicCategory", b =>
                {
                    b.HasOne("MangaManagementAPI.Data.Entites.Category", "Category")
                        .WithMany("ComicCategories")
                        .HasForeignKey("CategoryIdentifier")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MangaManagementAPI.Data.Entites.Comic", "Comic")
                        .WithMany("ComicCategories")
                        .HasForeignKey("ComicIdentifier")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Category");

                    b.Navigation("Comic");
                });

            modelBuilder.Entity("MangaManagementAPI.Data.Entites.ComicSaving", b =>
                {
                    b.HasOne("MangaManagementAPI.Data.Entites.Comic", "Comic")
                        .WithMany("ComicSavings")
                        .HasForeignKey("ComicIdentifier")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MangaManagementAPI.Data.Entites.UserInfo", "UserInfo")
                        .WithMany("ComicSavings")
                        .HasForeignKey("UserIdentifier")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Comic");

                    b.Navigation("UserInfo");
                });

            modelBuilder.Entity("MangaManagementAPI.Data.Entites.ReadingHistory", b =>
                {
                    b.HasOne("MangaManagementAPI.Data.Entites.Chapter", "Chapter")
                        .WithMany("ReadingHistories")
                        .HasForeignKey("ChapterIdentifier")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MangaManagementAPI.Data.Entites.UserInfo", "UserInfo")
                        .WithMany("ReadingHistories")
                        .HasForeignKey("UserIdentifier")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Chapter");

                    b.Navigation("UserInfo");
                });

            modelBuilder.Entity("MangaManagementAPI.Data.Entites.ReviewChapter", b =>
                {
                    b.HasOne("MangaManagementAPI.Data.Entites.Chapter", "Chapter")
                        .WithMany("ReviewChapters")
                        .HasForeignKey("ChapterIdentifier")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MangaManagementAPI.Data.Entites.UserInfo", "UserInfo")
                        .WithMany("ReviewChapters")
                        .HasForeignKey("UserIdentifier")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Chapter");

                    b.Navigation("UserInfo");
                });

            modelBuilder.Entity("MangaManagementAPI.Data.Entites.ReviewComic", b =>
                {
                    b.HasOne("MangaManagementAPI.Data.Entites.Comic", "Comic")
                        .WithMany("ReviewComics")
                        .HasForeignKey("ComicIdentifier")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MangaManagementAPI.Data.Entites.UserInfo", "UserInfo")
                        .WithMany("ReviewComics")
                        .HasForeignKey("UserIdentifier")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Comic");

                    b.Navigation("UserInfo");
                });

            modelBuilder.Entity("MangaManagementAPI.Data.Entites.TransactionsHistory", b =>
                {
                    b.HasOne("MangaManagementAPI.Data.Entites.UserInfo", "UserInfo")
                        .WithMany("TransactionHistories")
                        .HasForeignKey("UserIdentifier")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("UserInfo");
                });

            modelBuilder.Entity("MangaManagementAPI.Data.Entites.Category", b =>
                {
                    b.Navigation("ComicCategories");
                });

            modelBuilder.Entity("MangaManagementAPI.Data.Entites.Chapter", b =>
                {
                    b.Navigation("ChapterImages");

                    b.Navigation("ReadingHistories");

                    b.Navigation("ReviewChapters");
                });

            modelBuilder.Entity("MangaManagementAPI.Data.Entites.Comic", b =>
                {
                    b.Navigation("Chapters");

                    b.Navigation("ComicCategories");

                    b.Navigation("ComicSavings");

                    b.Navigation("ReviewComics");
                });

            modelBuilder.Entity("MangaManagementAPI.Data.Entites.UserInfo", b =>
                {
                    b.Navigation("ComicSavings");

                    b.Navigation("ReadingHistories");

                    b.Navigation("ReviewChapters");

                    b.Navigation("ReviewComics");

                    b.Navigation("TransactionHistories");
                });
#pragma warning restore 612, 618
        }
    }
}
